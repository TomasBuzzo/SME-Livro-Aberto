"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import json
import os

from decouple import config, Csv
from dj_database_url import parse as db_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', False)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

USE_THOUSAND_SEPARATOR = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django.contrib.humanize',
    'rest_framework',
    'fullurl',
    'mosaico',
    'geologia',
    'contratos',
    'regionalizacao',
    'from_to_handler.apps.FromToHandlerConfig',
    'budget_execution.apps.BudgetExecutionConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = config('STATICFILES_STORAGE', 'whitenoise.storage.CompressedManifestStaticFilesStorage')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

if 'whitenoise' in STATICFILES_STORAGE:
    MIDDLEWARE.append('whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['core/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3'),
        cast=db_url
    )
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'


# Project config
ORCADO_DIFFERENCE_PERCENT_LIMIT = config('ORCADO_DIFFERENCE_PERCENT_LIMIT', 0.2)
EMPENHADO_DIFFERENCE_PERCENT_LIMIT = config(
    'EMPENHADO_DIFFERENCE_PERCENT_LIMIT', 0.2)

# If you just want to run tests, set `PRODAM_KEY` as empty
PRODAM_URL = config(
    'PRODAM_URL',
    'https://gatewayapi.prodam.sp.gov.br:443/financas/orcamento/sof/v3.0.1/empenhos')  # noqa
PRODAM_KEY = config('PRODAM_KEY')
CONTRATOS_EMPENHOS_DIFFERENCE_PERCENT_LIMIT = config(
    'CONTRATOS_EMPENHOS_DIFFERENCE_PERCENT_LIMIT', 0.3)
CONTRATOS_RAW_DUMP_DIR_PATH = config(
    'CONTRATOS_RAW_DUMP_DIR_PATH', f'{BASE_DIR}/../contratos/data/')
CONTRATOS_RAW_DUMP_FILENAME = config(
    'CONTRATOS_RAW_DUMP_FILENAME', 'contratos_raw_dump.zip')
EXECUCOES_CONTRATOS_DUMP_DIR_PATH = config(
    'EXECUCOES_CONTRATOS_DUMP_DIR_PATH', f'{BASE_DIR}/../contratos/data/')
EXECUCOES_CONTRATOS_DUMP_FILENAME = config(
    'EXECUCOES_CONTRATOS_DUMP_FILENAME', 'execucaocontrato_and_fks_dump.zip')
ORCAMENTO_EMPENHOS_RAW_DUMP_DIR_PATH = config(
    'ORCAMENTO_EMPENHOS_RAW_DUMP_DIR_PATH',
    f'{BASE_DIR}/../budget_execution/data/')
ORCAMENTO_EMPENHOS_RAW_DUMP_FILENAME = config(
    'ORCAMENTO_EMPENHOS_RAW_DUMP_FILENAME', 'orcamento_empenhos_dump.zip')
categoria_from_to_json = config(
    'CATEGORIA_FROM_TO_SLUG_STR',
    ('{"Eventos Culturais e Esportivos em CEUs": "acoes-culturais", '
     '"Alimentação": "alimentacao", '
     '"Obras": "contrucoes", "Parcerias": "parcerias", "Pedagógico": '
     '"pedagogico", "Manutenção e Operação de Unidades": "manutencao", '
     '"Serviços Contínuos": "servicos", "Transporte": "transportes", '
     '"Uniforme e Material Escolar": "uniformes", "Outras Aquisições": '
     '"outros"}')
)
CATEGORIA_FROM_TO_SLUG = json.loads(categoria_from_to_json)


# REGIONALIZACAO CONFIG
EOL_API_URL = config(
    'EOL_API_URL',
    'https://hom-escolaaberta.sme.prefeitura.sp.gov.br/api/')

SENTRY_URL = config('SENTRY_URL', None)
if SENTRY_URL:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    sentry_sdk.init(
        dsn=SENTRY_URL,
        integrations=[DjangoIntegration(), CeleryIntegration()]
    )
